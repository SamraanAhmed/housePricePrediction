# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dgBrsnA9I8gRxtbkiK0Yvk1vWUDoeNv-
"""

# pip install numpy==1.23.5 pandas==1.5.3 matplotlib==3.3.4 seaborn==0.11.1 scikit-learn==1.2.2

# # Commented out IPython magic to ensure Python compatibility.
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# # %matplotlib inline

# USAhousing = pd.read_csv('USA_Housing.csv')

# USAhousing.info()

# USAhousing.describe()

# sns.heatmap(USAhousing.corr())

# plt.scatter(USAhousing['Avg. Area Income'],USAhousing['Price'])

# plt.scatter(USAhousing['Avg. Area House Age'],USAhousing['Price'])

# plt.scatter(USAhousing['Avg. Area Number of Rooms'],USAhousing['Price'])

# plt.scatter(USAhousing['Avg. Area Number of Bedrooms'],USAhousing['Price'])

# plt.scatter(USAhousing['Area Population'],USAhousing['Price'])

# sns.pairplot(USAhousing)

# sns.distplot(USAhousing['Price'])

# X = USAhousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
#                'Avg. Area Number of Bedrooms', 'Area Population']]
# y = USAhousing['Price']

# from sklearn.model_selection import train_test_split

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)

# from sklearn.linear_model import LinearRegression
# lm = LinearRegression()
# lm.fit(X_train,y_train)

# predictions = lm.predict(X_test)
# plt.scatter(y_test,predictions)

# from sklearn import metrics

# print('MAE:', metrics.mean_absolute_error(y_test, predictions))
# print('MSE:', metrics.mean_squared_error(y_test, predictions))
# print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

# import joblib
# # Save the model
# joblib.dump(lm, 'house_price_model.pkl')

# # Load the model later
# loaded_model = joblib.load('house_price_model.pkl')

# # Use the loaded model for predictions
# new_house = np.array([[80000, 6, 7, 4, 35000]])
# predicted_price = loaded_model.predict(new_house)
# print(f"Predicted Price: ${predicted_price[0]:,.2f}")

# # Example: Predict price for a new house
# new_house = np.array([[80000, 6, 7, 4, 3005000]])  # Example values for [Avg. Area Income, Avg. Area House Age, Avg. Area Number of Rooms, Avg. Area Number of Bedrooms, Area Population]
# predicted_price = lm.predict(new_house)
# print(f"Predicted Price: ${predicted_price[0]:,.2f}")

# # Add after model training
# print("Enter house details for price prediction:")
# income = float(input("Avg. Area Income: "))
# age = float(input("Avg. Area House Age: "))
# rooms = float(input("Avg. Area Number of Rooms: "))
# bedrooms = float(input("Avg. Area Number of Bedrooms: "))
# population = float(input("Area Population: "))

# new_house = np.array([[income, age, rooms, bedrooms, population]])
# predicted_price = lm.predict(new_house)
# print(f"Predicted Price: ${predicted_price[0]:,.2f}")






































import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv('pakistan_house_price_data.csv')

# Filter for "For Sale" entries
df = df[df['purpose'] == 'For Sale']

# Select features and target
features = ['bedrooms', 'baths', 'Total_Area']
target = 'price'

# Drop rows with missing values in selected columns
df = df[features + [target]].dropna()

# Remove outliers: cap Total_Area and price
# Cap Total_Area at 50,000 sq.ft. (reasonable for residential properties)
df = df[df['Total_Area'] <= 50000]
# Cap price at 500,000,000 PKR (removes extreme luxury properties)
df = df[df['price'] <= 500000000]

# Split features and target
X = df[features]
y = df[target]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=101
)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R^2 Score: {r2:.2f}')

# Function to predict price for new property
def predict_price(bedrooms, baths, total_area):
    # Create input array
    input_data = np.array([[bedrooms, baths, total_area]])
    # Scale input
    input_scaled = scaler.transform(input_data)
    # Predict
    predicted_price = model.predict(input_scaled)[0]
    return max(predicted_price, 0)  # Ensure non-negative price

# User input for prediction
print("\nEnter property details to predict price (in PKR):")
try:
    bedrooms = float(input("Number of bedrooms (e.g., 3): "))
    baths = float(input("Number of bathrooms (e.g., 2): "))
    total_area = float(input("Total area in square feet (e.g., 2000): "))

    # Validate inputs
    if bedrooms < 0 or baths < 0 or total_area < 0:
        print("Error: Inputs cannot be negative.")
    elif total_area > 50000:
        print("Error: Total area exceeds reasonable limit (50,000 sq.ft.).")
    else:
        # Predict and display result
        predicted_price = predict_price(bedrooms, baths, total_area)
        print(f'\nPredicted Price: PKR {predicted_price:,.2f}')
except ValueError:
    print("Error: Please enter valid numerical values.")














































# import pandas as pd
# import numpy as np
# import seaborn as sns
# import matplotlib.pyplot as plt
# from sklearn.model_selection import train_test_split
# from sklearn.linear_model import LinearRegression
# from sklearn.preprocessing import StandardScaler
# from sklearn.metrics import mean_squared_error, r2_score

# # Load the dataset
# df = pd.read_csv('pakistan_house_price_data.csv')

# # Filter for "For Sale" entries
# df = df[df['purpose'] == 'For Sale']

# # Select features and target
# features = ['bedrooms', 'baths', 'Total_Area']
# target = 'price'

# # Drop rows with missing values in selected columns
# df = df[features + [target]].dropna()

# # Remove outliers: cap Total_Area and price
# df = df[df['Total_Area'] <= 50000]
# df = df[df['price'] <= 500000000]

# # Generate pairplot for visualization
# sns.pairplot(df[features + [target]])
# plt.savefig('pairplot.png')
# plt.close()
# print("Pairplot saved as 'pairplot.png'")

# # Split features and target
# X = df[features]
# y = df[target]

# # Scale features
# scaler = StandardScaler()
# X_scaled = scaler.fit_transform(X)

# # Split data into training and testing sets
# X_train, X_test, y_train, y_test = train_test_split(
#     X_scaled, y, test_size=0.2, random_state=101
# )

# # Initialize and train the model
# model = LinearRegression()
# model.fit(X_train, y_train)

# # Evaluate the model
# y_pred = model.predict(X_test)
# mse = mean_squared_error(y_test, y_pred)
# r2 = r2_score(y_test, y_pred)
# print(f'Mean Squared Error: {mse:.2f}')
# print(f'R^2 Score: {r2:.2f}')

# # Function to predict price for new property
# def predict_price(bedrooms, baths, total_area):
#     input_data = np.array([[bedrooms, baths, total_area]])
#     input_scaled = scaler.transform(input_data)
#     predicted_price = model.predict(input_scaled)[0]
#     return max(predicted_price, 0)

# # User input for prediction
# print("\nEnter property details to predict price (in PKR):")
# try:
#     bedrooms = float(input("Number of bedrooms (e.g., 3): "))
#     baths = float(input("Number of bathrooms (e.g., 2): "))
#     total_area = float(input("Total area in square feet (e.g., 2000): "))

#     if bedrooms < 0 or baths < 0 or total_area < 0:
#         print("Error: Inputs cannot be negative.")
#     elif total_area > 50000:
#         print("Error: Total area exceeds reasonable limit (50,000 sq.ft.).")
#     else:
#         predicted_price = predict_price(bedrooms, baths, total_area)
#         print(f'\nPredicted Price: PKR {predicted_price:,.2f}')
# except ValueError:
#     print("Error: Please enter valid numerical values.")

